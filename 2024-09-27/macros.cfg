########################################
# Macros
########################################

[gcode_macro MAKE_NEW_MESH]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro LOAD_PREVIOUS_MESH]
gcode:
    BED_MESH_PROFILE load=default

# Spoolman macros
[gcode_macro SET_ACTIVE_SPOOL]
description: Set active spool in Spoolman by id
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
description: Deactivate current tracked spool in Spoolman
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro START_PRINT]
description: Gcode ran at the start of each print. This is called by the slicer to make per machine config easier and cross_slicer compatible.
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
  {% if EXTRUDER_TEMP == 0 %}
    CANCEL_PRINT
    {action_raise_error("Your extruder temperature was not received from your slicer or was incorrectly set. Check that your code and parameters are accurate and restart the print. It may be helpful to look at the start gcode section of the slicer generated gcode file.")}
  {% else %}
    {% if BED_TEMP == 0 %}
      {action_respond_info("Your bed temperature was not received or is set to 0. If this is not intended, cancel the print and check that your code and parameters are accurate and restart the print.")}
    {% endif %}
    CLEAR_PAUSE
    LOAD_PREVIOUS_MESH
    RESPOND MSG="Loaded default mesh"
    RESPOND MSG="Heating..."
    SET_DISPLAY_TEXT MSG="Heating..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP+1}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    G90 # use absolute coordinates
    M220 S100 # reset speed
    M221 S100 # reset extrusion modifier
    G28 # home all with default mesh bed level
    Z_TILT_ADJUST # tilt X gantry
    G28 Z # re-home Z
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP} MAXIMUM={EXTRUDER_TEMP+1}
    # SET_SKEW XY=141.02,141.52,99.71
    RESPOND MSG="Print started"
    SET_DISPLAY_TEXT MSG="Printing..."
  {% endif %}

# Mesh snippet - doesn't work, but might be useful in the futuree
    # {% if 'bed_mesh' not in printer %}
    #   {action_respond_info("[bed_mesh] is not enabled. Skipping load profile")}
    # {% else %}
    #   BED_MESH_PROFILE LOAD=default
    #   {% if bed_mesh.profile_name is none %}
    #     {action_respond_info("Default mesh profile does not seem to be calibrated and will not effect this print. Please calibrate the mesh to apply it for next time")}
    #   {% else %}
    #     {action_respond_info("Loaded default mesh")}
    #   {% endif %}
    # {% endif %}

[gcode_macro END_PRINT]
gcode:
    # Retract
    G1 E-2 F1800
    # Raise nozzle away from print
    G91
    G1 Z1 F200
    # Move to absolute position
    G90
    G1 X5 Y205 F12000
    # Raise nozzle a bit more
    G91
    G1 Z4 F200
    # Turn off bed, extruder, and fan
    TURN_OFF_HEATERS
    M106 S0
    # Disable steppers
    M84
    SET_DISPLAY_TEXT MSG="Print complete"

[gcode_macro HEAT_SOAK]
description: Heat soak the printer to avoid Z offset drift (for inductive probe - not necessary when klippy will get implemented)
gcode:
  SET_DISPLAY_TEXT MSG="Heat soak started"
  RESPOND MSG="Heat soak started"
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=70 # average between 60C (PLA) and 80C (PET-G)
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=70 MAXIMUM=71
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=130
  G28 # home
  G1 Z3 F200 # lower Z a bit to pick up heat from bed
  M84 # turn off the motors as they aren't necessary at this point
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=130 MAXIMUM=131
  SET_DISPLAY_TEXT MSG="5 minutes left"
  G4 P60000
  SET_DISPLAY_TEXT MSG="4 minutes left"
  G4 P60000
  SET_DISPLAY_TEXT MSG="3 minutes left"
  G4 P60000
  SET_DISPLAY_TEXT MSG="2 minutes left"
  G4 P60000
  SET_DISPLAY_TEXT MSG="1 minute left"
  G4 P60000
  BEEP
  SET_DISPLAY_TEXT MSG="Heat soak done"
  RESPOND MSG="Heat soak finished"

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=1
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
		G4 P{dur}
    {% endfor %}

# [gcode_macro LOAD_FILAMENT]
# default_parameter_EXTRUDER_TEMP: 200
# default_parameter_BOWDEN_TUBE_LENGTH: 500
# gcode:
#     # Let the printer know you are following this point with metric values
#     G21
#     # Let the printer know you are using absolute positioning
#     G90
#     # Start nozzle heating
#     M117 Heating nozzle
#     M104 S{EXTRUDER_TEMP}
#     # Set and wait for nozzle to reach temperature
#     M109 S{EXTRUDER_TEMP}
#     # Reset the position of the extruder
#     G92 E0
#     # Feed BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
#     G1 E{BOWDEN_TUBE_LENGTH} F300
#     # Reset the position of the extruder
#     G92 E0

# [gcode_macro UNLOAD_FILAMENT]
# default_parameter_EXTRUDER_TEMP: 200
# default_parameter_BOWDEN_TUBE_LENGTH: 520
# gcode:
#     # Let the printer know you are following this point with metric values
#     G21
#     # Let the printer know you are using absolute positioning
#     G90
#     # Start nozzle heating
#     M117 Heating nozzle
#     M104 S{EXTRUDER_TEMP}
#     # Set and wait for nozzle to reach temperature
#     M109 S{EXTRUDER_TEMP}
#     # Reset the position of the extruder
#     G92 E0
#     # Extrude a short distance before unloading to avoid blob forming
#     G1 E10 F100
#     # Reset the position of the extruder
#     G92 E0
#     # Retract BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
#     G1 E-{BOWDEN_TUBE_LENGTH} F2000
#     # Reset the position of the extruder
#     G92 E0
#     # Display message on LCD-display to remove the filament
#     M117 Remove filament

## Client variable macro for Mainsail/Fluidd
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 205.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 1.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 2.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 25.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 5.0  ; z move speed in mm/s
variable_speed_move       : 200.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : "BEEP"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
