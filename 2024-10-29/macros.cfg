########################################
# Macros
########################################

[gcode_macro MAKE_NEW_MESH]
description: Create a new bed mesh
gcode:
    BED_MESH_CALIBRATE

[gcode_macro LOAD_PREVIOUS_MESH]
description: Loads mesh in default slot
gcode:
    BED_MESH_PROFILE load=default

[gcode_macro HOME_CONDITIONALLY]
description: Home if not already homed
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}

[gcode_macro START_PRINT]
description: G-code run at the beginning of each print.
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set CURRENT_BED_TEMP = printer.heater_bed.temperature %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    {% if EXTRUDER_TEMP == 0 %}
      CANCEL_PRINT
      {action_raise_error("No extruder temperature was set")}
    {% elif BED_TEMP == 0 %}
      CANCEL_PRINT
      {action_raise_error("No heated bed temperature was set")}
    {% elif 'bed_mesh' not in printer %}
      CANCEL_PRINT
      {action_raise_error("No bed mesh in memory")}
    {% else %}
      {% if CURRENT_BED_TEMP < BED_TEMP - 20 %}
        HEAT_SOAK
      {% endif %}
      CLEAR_PAUSE
      LOAD_PREVIOUS_MESH
      RESPOND MSG="Loaded default mesh"
      RESPOND MSG="Heating..."
      SET_DISPLAY_TEXT MSG="Heating..."
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP+1}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
      G90 # use absolute coordinates
      M220 S100 # reset speed
      M221 S100 # reset extrusion modifier
      HOME_CONDITIONALLY
      Z_TILT_ADJUST # tilt X gantry
      G28 Z # re-home Z in case tilt changed Z origin
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP} MAXIMUM={EXTRUDER_TEMP+1}
      # SET_SKEW XY=141.02,141.52,99.71
      RESPOND MSG="Print started"
      SET_DISPLAY_TEXT MSG="Printing..."
    {% endif %}

[gcode_macro END_PRINT]
gcode:
    G1 E-2 F1800 # Retract
    G91 # Relative coords
    G1 Z1 F200 # Raise nozzle away from print
    G90 # Absolute coords
    G1 X5 Y205 F12000 # Move to absolute position
    G91 # Relative coords
    G1 Z4 F200 # Raise nozzle a bit more
    TURN_OFF_HEATERS
    M106 S0 # Turn off part fan
    M84 # Disable steppers
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
    SET_DISPLAY_TEXT MSG="Print complete"

[gcode_macro HEAT_SOAK]
description: Heat soak the printer to avoid Z offset drift (for inductive probe - not necessary after Klicky probe installation)
gcode:
    SET_DISPLAY_TEXT MSG="Heat soak start"
    RESPOND MSG="Heat soak started"
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=70 # average between 60C (PLA) and 80C (PET-G)
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=70 MAXIMUM=71
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=130
    HOME_CONDITIONALLY
    G1 Z3 F200 # lower Z a bit to pick up heat from bed
    M84 # turn off the motors as they aren't necessary at this point
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=130 MAXIMUM=131
    SET_DISPLAY_TEXT MSG="5 minutes left"
    G4 P60000
    SET_DISPLAY_TEXT MSG="4 minutes left"
    G4 P60000
    SET_DISPLAY_TEXT MSG="3 minutes left"
    G4 P60000
    SET_DISPLAY_TEXT MSG="2 minutes left"
    G4 P60000
    SET_DISPLAY_TEXT MSG="1 minute left"
    G4 P60000
    BEEP
    SET_DISPLAY_TEXT MSG="Heat soak done"
    RESPOND MSG="Heat soak finished"

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=1
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
		G4 P{dur}
    {% endfor %}

[gcode_macro M300]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.P|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.S|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=BEEPER_Pin VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=BEEPER_Pin VALUE=0
        G4 P{dur}
    {% endfor %}

# [output_pin beeper2]
# pin: rpi:gpio26
# value: 0
# shutdown_value: 0
# pwm: True
# cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

[output_pin BEEPER_Pin]
pin: rpi:gpio26
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001

# [gcode_macro M300]
# gcode:  
#   {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
#   {% set P = params.P|default(100)|int %} ; P sets the tone duration
#   {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
#   {% if S <= 0 %} ; dont divide through zero
#   {% set F = 1 %}
#   {% set L = 0 %}
#   {% elif S >= 10000 %} ;max frequency set to 10kHz
#   {% set F = 0 %}
#   {% else %}
#   {% set F = 1/S %} ;convert frequency to seconds 
#   {% endif %}
#     SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
#   G4 P{P} ;tone duration
#     SET_PIN PIN=BEEPER_Pin VALUE=0

[gcode_macro SONG_STARWARS_IMP]
gcode:
	M300 S1174 P401
	M300 S1174 P401
	M300 S1174 P401
	M300 S466 P267
	M300 S1396 P133
	M300 S1174 P401
	M300 S466 P267
	M300 S1396 P133
	M300 S1174 P803

# [gcode_macro LOAD_FILAMENT]
# default_parameter_EXTRUDER_TEMP: 200
# default_parameter_BOWDEN_TUBE_LENGTH: 500
# gcode:
#     G21 # metric values
#     G90 # absolute positioning
#     HOME_CONDITIONALLY
#     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
#     TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP+1}
#     # Set and wait for nozzle to reach temperature
#     M109 S{EXTRUDER_TEMP}
#     # Reset the position of the extruder
#     G92 E0
#     # Feed BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
#     G1 E{BOWDEN_TUBE_LENGTH} F300
#     # Reset the position of the extruder
#     G92 E0

# [gcode_macro UNLOAD_FILAMENT]
# default_parameter_EXTRUDER_TEMP: 200
# default_parameter_BOWDEN_TUBE_LENGTH: 520
# gcode:
#     # Let the printer know you are following this point with metric values
#     G21
#     # Let the printer know you are using absolute positioning
#     G90
#     # Start nozzle heating
#     M117 Heating nozzle
#     M104 S{EXTRUDER_TEMP}
#     # Set and wait for nozzle to reach temperature
#     M109 S{EXTRUDER_TEMP}
#     # Reset the position of the extruder
#     G92 E0
#     # Extrude a short distance before unloading to avoid blob forming
#     G1 E10 F100
#     # Reset the position of the extruder
#     G92 E0
#     # Retract BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
#     G1 E-{BOWDEN_TUBE_LENGTH} F2000
#     # Reset the position of the extruder
#     G92 E0
#     # Display message on LCD-display to remove the filament
#     M117 Remove filament

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


## Client variable macro for Mainsail/Fluidd
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 205.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 1.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 2.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 25.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 5.0  ; z move speed in mm/s
variable_speed_move       : 200.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : "BEEP"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode: